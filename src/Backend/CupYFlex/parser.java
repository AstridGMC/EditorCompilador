
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Sep 03 13:33:39 CST 2020
//----------------------------------------------------

package Backend.CupYFlex;

import Backend.AnalizadorLexico.Nodo;
import java.util.LinkedList;
import java_cup.runtime.*;
import Backend.CupYFlex.ErrorS;
import Backend.Compilador.Compilador;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Sep 03 13:33:39 CST 2020
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\061\000\002\002\004\000\002\023\002\000\002\002" +
    "\010\000\002\024\002\000\002\002\007\000\002\003\006" +
    "\000\002\003\005\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\005\004\000\002\005\003\000\002\006\006\000\002\006" +
    "\006\000\002\006\006\000\002\006\006\000\002\010\004" +
    "\000\002\015\004\000\002\015\004\000\002\011\005\000" +
    "\002\011\003\000\002\012\006\000\002\012\006\000\002" +
    "\021\004\000\002\021\005\000\002\021\005\000\002\021" +
    "\003\000\002\020\004\000\002\020\005\000\002\020\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\017\007\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\005\000\002\013\006\000\002\014\010" +
    "\000\002\014\003\000\002\016\004\000\002\016\003\000" +
    "\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\004\006\005\001\002\000\004\002\144\001" +
    "\002\000\004\015\006\001\002\000\004\031\007\001\002" +
    "\000\014\007\000\010\000\011\000\012\000\016\ufffe\001" +
    "\002\000\004\016\034\001\002\000\012\007\016\010\014" +
    "\011\017\012\013\001\002\000\014\007\016\010\014\011" +
    "\017\012\013\016\034\001\002\000\004\030\031\001\002" +
    "\000\004\030\026\001\002\000\014\007\ufff4\010\ufff4\011" +
    "\ufff4\012\ufff4\016\ufff4\001\002\000\004\030\023\001\002" +
    "\000\004\030\020\001\002\000\004\015\021\001\002\000" +
    "\004\031\022\001\002\000\014\007\ufff1\010\ufff1\011\ufff1" +
    "\012\ufff1\016\ufff1\001\002\000\004\027\024\001\002\000" +
    "\004\031\025\001\002\000\014\007\ufff3\010\ufff3\011\ufff3" +
    "\012\ufff3\016\ufff3\001\002\000\004\015\027\001\002\000" +
    "\004\031\030\001\002\000\014\007\ufff2\010\ufff2\011\ufff2" +
    "\012\ufff2\016\ufff2\001\002\000\004\015\032\001\002\000" +
    "\004\031\033\001\002\000\014\007\ufff0\010\ufff0\011\ufff0" +
    "\012\ufff0\016\ufff0\001\002\000\004\016\141\001\002\000" +
    "\014\007\ufff5\010\ufff5\011\ufff5\012\ufff5\016\ufff5\001\002" +
    "\000\006\002\uffff\016\037\001\002\000\004\016\040\001" +
    "\002\000\014\003\050\013\042\014\046\015\047\032\041" +
    "\001\002\000\004\017\136\001\002\000\004\015\131\001" +
    "\002\000\006\002\ufff9\016\ufff9\001\002\000\006\002\ufffa" +
    "\016\ufffa\001\002\000\010\002\uffd1\015\070\016\uffd1\001" +
    "\002\000\004\015\131\001\002\000\014\002\uffd2\015\uffd2" +
    "\016\uffd2\017\056\030\057\001\002\000\006\002\ufff6\016" +
    "\ufff6\001\002\000\006\013\042\014\046\001\002\000\006" +
    "\002\ufffc\016\ufffc\001\002\000\006\002\ufff8\016\ufff8\001" +
    "\002\000\006\002\ufff7\016\ufff7\001\002\000\006\002\uffef" +
    "\016\uffef\001\002\000\026\004\072\005\073\015\101\020" +
    "\100\023\075\024\105\035\104\036\102\037\074\041\106" +
    "\001\002\000\004\030\060\001\002\000\004\015\061\001" +
    "\002\000\010\002\uffd4\016\uffd4\033\uffd4\001\002\000\010" +
    "\002\uffd6\016\uffd6\033\063\001\002\000\004\015\064\001" +
    "\002\000\004\020\065\001\002\000\004\015\066\001\002" +
    "\000\006\015\uffd2\021\uffd2\001\002\000\006\015\070\021" +
    "\071\001\002\000\012\002\uffd3\015\uffd3\016\uffd3\021\uffd3" +
    "\001\002\000\010\002\uffd5\016\uffd5\033\uffd5\001\002\000" +
    "\040\004\uffd9\005\uffd9\015\uffd9\021\uffd9\023\uffd9\025\uffd9" +
    "\026\uffd9\031\uffd9\032\uffd9\033\uffd9\035\uffd9\036\uffd9\037" +
    "\uffd9\040\uffd9\041\uffd9\001\002\000\040\004\uffd8\005\uffd8" +
    "\015\uffd8\021\uffd8\023\uffd8\025\uffd8\026\uffd8\031\uffd8\032" +
    "\uffd8\033\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8" +
    "\001\002\000\040\004\uffda\005\uffda\015\uffda\021\uffda\023" +
    "\uffda\025\uffda\026\uffda\031\uffda\032\uffda\033\uffda\035\uffda" +
    "\036\uffda\037\uffda\040\uffda\041\uffda\001\002\000\004\015" +
    "\125\001\002\000\024\004\072\005\073\015\101\023\075" +
    "\031\124\035\104\036\102\037\074\041\106\001\002\000" +
    "\040\004\uffe5\005\uffe5\015\uffe5\021\uffe5\023\uffe5\025\uffe5" +
    "\026\114\031\uffe5\032\115\033\120\035\uffe5\036\uffe5\037" +
    "\uffe5\040\116\041\uffe5\001\002\000\026\004\072\005\073" +
    "\015\101\020\100\023\075\024\105\035\104\036\102\037" +
    "\074\041\106\001\002\000\040\004\uffdd\005\uffdd\015\uffdd" +
    "\021\uffdd\023\uffdd\025\uffdd\026\uffdd\031\uffdd\032\uffdd\033" +
    "\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\001\002" +
    "\000\040\004\uffdc\005\uffdc\015\uffdc\021\uffdc\023\uffdc\025" +
    "\uffdc\026\uffdc\031\uffdc\032\uffdc\033\uffdc\035\uffdc\036\uffdc" +
    "\037\uffdc\040\uffdc\041\uffdc\001\002\000\040\004\uffe2\005" +
    "\uffe2\015\uffe2\021\uffe2\023\uffe2\025\uffe2\026\uffe2\031\uffe2" +
    "\032\uffe2\033\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041" +
    "\uffe2\001\002\000\040\004\uffdb\005\uffdb\015\uffdb\021\uffdb" +
    "\023\uffdb\025\uffdb\026\uffdb\031\uffdb\032\uffdb\033\uffdb\035" +
    "\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\001\002\000\026" +
    "\004\072\005\073\015\101\020\100\023\075\024\105\035" +
    "\104\036\102\037\074\041\106\001\002\000\004\015\107" +
    "\001\002\000\004\041\110\001\002\000\040\004\uffd7\005" +
    "\uffd7\015\uffd7\021\uffd7\023\uffd7\025\uffd7\026\uffd7\031\uffd7" +
    "\032\uffd7\033\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041" +
    "\uffd7\001\002\000\024\004\072\005\073\015\101\023\075" +
    "\025\112\035\104\036\102\037\074\041\106\001\002\000" +
    "\030\004\uffe6\005\uffe6\015\uffe6\021\uffe6\023\uffe6\025\uffe6" +
    "\031\uffe6\035\uffe6\036\uffe6\037\uffe6\041\uffe6\001\002\000" +
    "\040\004\uffe8\005\uffe8\015\uffe8\021\uffe8\023\uffe8\025\uffe8" +
    "\026\114\031\uffe8\032\115\033\120\035\uffe8\036\uffe8\037" +
    "\uffe8\040\116\041\uffe8\001\002\000\040\004\uffdf\005\uffdf" +
    "\015\uffdf\021\uffdf\023\uffdf\025\uffdf\026\uffdf\031\uffdf\032" +
    "\uffdf\033\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf" +
    "\001\002\000\040\004\uffe0\005\uffe0\015\uffe0\021\uffe0\023" +
    "\uffe0\025\uffe0\026\uffe0\031\uffe0\032\uffe0\033\uffe0\035\uffe0" +
    "\036\uffe0\037\uffe0\040\uffe0\041\uffe0\001\002\000\040\004" +
    "\uffe1\005\uffe1\015\uffe1\021\uffe1\023\uffe1\025\uffe1\026\uffe1" +
    "\031\uffe1\032\uffe1\033\uffe1\035\uffe1\036\uffe1\037\uffe1\040" +
    "\uffe1\041\uffe1\001\002\000\040\004\uffe4\005\uffe4\015\uffe4" +
    "\021\uffe4\023\uffe4\025\uffe4\026\uffe4\031\uffe4\032\uffe4\033" +
    "\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\001\002" +
    "\000\022\004\072\005\073\015\101\023\075\035\104\036" +
    "\102\037\074\041\106\001\002\000\040\004\uffe3\005\uffe3" +
    "\015\uffe3\021\uffe3\023\uffe3\025\uffe3\026\uffe3\031\uffe3\032" +
    "\uffe3\033\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3" +
    "\001\002\000\024\004\072\005\073\015\101\021\123\023" +
    "\075\035\104\036\102\037\074\041\106\001\002\000\030" +
    "\004\uffe7\005\uffe7\015\uffe7\021\uffe7\023\uffe7\025\uffe7\031" +
    "\uffe7\035\uffe7\036\uffe7\037\uffe7\041\uffe7\001\002\000\006" +
    "\002\uffea\016\uffea\001\002\000\004\034\126\001\002\000" +
    "\004\015\127\001\002\000\004\022\130\001\002\000\040" +
    "\004\uffde\005\uffde\015\uffde\021\uffde\023\uffde\025\uffde\026" +
    "\uffde\031\uffde\032\uffde\033\uffde\035\uffde\036\uffde\037\uffde" +
    "\040\uffde\041\uffde\001\002\000\014\002\uffeb\013\uffeb\014" +
    "\uffeb\016\uffeb\042\uffeb\001\002\000\014\002\uffed\013\uffed" +
    "\014\uffed\016\uffed\042\133\001\002\000\004\015\134\001" +
    "\002\000\014\002\uffec\013\uffec\014\uffec\016\uffec\042\uffec" +
    "\001\002\000\014\002\uffee\013\uffee\014\uffee\016\uffee\042" +
    "\133\001\002\000\026\004\072\005\073\015\101\020\100" +
    "\023\075\024\105\035\104\036\102\037\074\041\106\001" +
    "\002\000\024\004\072\005\073\015\101\023\075\031\140" +
    "\035\104\036\102\037\074\041\106\001\002\000\006\002" +
    "\uffe9\016\uffe9\001\002\000\014\003\050\013\042\014\046" +
    "\015\047\032\041\001\002\000\006\002\ufffb\016\ufffb\001" +
    "\002\000\006\002\ufffd\016\037\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\023\010\024\007" +
    "\001\001\000\004\003\142\001\001\000\006\005\011\006" +
    "\014\001\001\000\006\003\035\006\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\004\051\007\043\010\052\012" +
    "\042\013\053\015\050\016\044\001\001\000\002\001\001" +
    "\000\004\011\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\102\020\076\021\075\001\001\000" +
    "\002\001\001\000\004\014\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\102\020\112\001\001\000\004\022\116\001\001\000" +
    "\010\017\102\020\076\021\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\102\020\076\021\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\102\020" +
    "\112\001\001\000\002\001\001\000\004\022\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\120\001\001\000\002\001\001" +
    "\000\006\017\102\020\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\102\020\076\021\136\001\001\000\006\017" +
    "\102\020\112\001\001\000\002\001\001\000\020\004\141" +
    "\007\043\010\052\012\042\013\053\015\050\016\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila =  s.right;
        int columna = s.left;
        String red="\033[31m"; 
        System.out.println(red + "ERROR SINTACTICO RECUPERADO!! \t\tLexema: " + lexema+ "\t\tFila " + fila +"\t\tColumna: " +columna+"simbolo"  );
        ErrorS error = new ErrorS(lexema, fila, columna , "error Sintactico");
        ErrorS.tablaErroresSintacticos.add(error);
    }

    public void unrrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        String red="\033[31m"; 
        System.out.println(red + "ERROR SINTACTICO SIN RECUPERACION!! \t\tLexema: " + lexema+ "\t\tFila " + fila +"\t\tColumna: " +columna );
        ErrorS error = new ErrorS(lexema, fila, columna , "error Sintactico");
        ErrorS.tablaErroresSintacticos.add(error);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


    int numNodo=1;
    Compilador compilador;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // codFuente ::= codJava 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codFuente",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // codJava ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codJava",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // codJava ::= codJava ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codJava",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cuerpoGramatica ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoGramatica",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // cuerpoGramatica ::= cuerpoGramatica BARRAO ID LLAVEABRE codJava LLAVECIERRA 
            {
              Object RESULT =null;
		
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoGramatica",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaracionGramatica ::= ID DOSPUNTOS DOSPUNTOS cuerpoGramatica 
            {
              Object RESULT =null;
		
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionGramatica",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expresion ::= COMILLA ID COMILLA 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            Nodo nuevo = new Nodo(e.toString(), numNodo);
                            nuevo.getPrimeros().add(numNodo);
                            nuevo.getUltimos().add(numNodo);;
                            nuevo.setAnulable(nuevo.anulable(nuevo));
                            numNodo++;
                            RESULT = nuevo;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expresion ::= PUNTO 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Nodo nuevo = new Nodo(e.toString(), numNodo);
                            nuevo.getPrimeros().add(numNodo);
                            nuevo.getUltimos().add(numNodo);
                            nuevo.setAnulable(nuevo.anulable(nuevo));
                            numNodo++;
                            RESULT = nuevo;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expresion ::= DIGITO 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Nodo nuevo = new Nodo(e.toString(), numNodo);
                            nuevo.getPrimeros().add(numNodo);
                            nuevo.getUltimos().add(numNodo);
                            nuevo.setAnulable(nuevo.anulable(nuevo));
                            numNodo++;
                            RESULT = nuevo;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expresion ::= ESPACIOBLANCO 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Nodo nuevo = new Nodo(e.toString(), numNodo);
                            nuevo.getPrimeros().add(numNodo);
                            nuevo.getUltimos().add(numNodo);
                            nuevo.setAnulable(nuevo.anulable(nuevo));
                            numNodo++;
                            RESULT = nuevo;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expresion ::= SALTOLINEA 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Nodo nuevo = new Nodo(e.toString(), numNodo);
                            nuevo.getPrimeros().add(numNodo);
                            nuevo.getUltimos().add(numNodo);;
                            nuevo.setAnulable(nuevo.anulable(nuevo));
                            numNodo++;
                            RESULT = nuevo;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expresion ::= TABULADOR 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Nodo nuevo = new Nodo(e.toString(), numNodo);
                            nuevo.getPrimeros().add(numNodo);
                            nuevo.getUltimos().add(numNodo);
                            nuevo.setAnulable(nuevo.anulable(nuevo));
                            numNodo++;
                            RESULT = nuevo;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expresion ::= ID 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Nodo nuevo = new Nodo(id.toString(), numNodo);
                            nuevo.getPrimeros().add(numNodo);
                            nuevo.getUltimos().add(numNodo);
                            nuevo.setAnulable(nuevo.anulable(nuevo));
                            numNodo++;
                            RESULT = nuevo;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expresion ::= CORCHETEABRE ID GUION ID CORCHETECIERRA 
            {
              Nodo RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int guionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int guionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object guion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            String exp= id1.toString()+ guion.toString()+id2.toString();
                            if(exp=="A-Z"){
                                exp= "L";
                            }else if(exp == "1-9"){
                                exp="num";
                            }
                            Nodo e =  new Nodo(exp, numNodo);
                            numNodo++;
                            e.getPrimeros().add(numNodo);
                            e.getUltimos().add(numNodo);
                            e.setAnulable(e.anulable(e));
                            numNodo++;
                            RESULT= e;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // simbolsF ::= ASTERISCO 
            {
              String RESULT =null;
		RESULT = "**" ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolsF",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // simbolsF ::= INTERROGACIONC 
            {
              String RESULT =null;
		RESULT ="??";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolsF",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // simbolsF ::= SIMMAS 
            {
              String RESULT =null;
		RESULT= "++";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolsF",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ExpresionesR ::= Expresion 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpresionesR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ExpresionesR ::= ExpresionesR BARRAO Expresion 
            {
              Nodo RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo exp1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo exp2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                        Nodo raiz = new Nodo("||");
                                        raiz.setIzquierdo(exp1);
                                        raiz.setDerecho(exp2);
                                        raiz.setAnulable(raiz.anulable(raiz));
                                        raiz.setPrimeros( raiz.AgregarPrimeros(raiz));
                                        raiz.setUltimos(raiz.AgregarUltimos(raiz));
                                        RESULT =raiz;
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpresionesR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ExpresionesR ::= ExpresionesR simbolsF 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Nodo raiz = new Nodo(sim);
                                      raiz.setIzquierdo(e);
                                      raiz.setAnulable(raiz.anulable(raiz));
                                      raiz.setPrimeros( raiz.AgregarPrimeros(e));
                                      raiz.setUltimos(raiz.AgregarUltimos(e));
                                      RESULT = raiz;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpresionesR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresionesRegulares ::= ExpresionesR 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesRegulares",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresionesRegulares ::= PARABRE expresionesRegulares PARCIERRA 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesRegulares",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresionesRegulares ::= LLAVEABRE expresionesRegulares LLAVECIERRA 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesRegulares",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresionesRegulares ::= expresionesRegulares ExpresionesR 
            {
              Nodo RESULT =null;
		int eileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo ei = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int edleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int edright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo ed = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Nodo raiz = new Nodo("·");
                                      raiz.setIzquierdo(ei);
                                      raiz.setDerecho(ed);
                                      raiz.setAnulable(raiz.anulable(raiz));
                                      raiz.setPrimeros( raiz.AgregarPrimeros(raiz));
                                      raiz.setUltimos(raiz.AgregarUltimos(raiz));
                                      RESULT = raiz;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesRegulares",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaracionExpresiones ::= INTERROGACIONC IGUAL expresionesRegulares PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionExpresiones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaracionExpresiones ::= ID IGUAL expresionesRegulares PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionExpresiones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SNterminales ::= ID 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SNterminales",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SNterminales ::= SNterminales COMA ID 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SNterminales",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // decSNTerminales ::= NOTERMINALID SNterminales 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decSNTerminales",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // decSNTerminales ::= TERMINALID SNterminales 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decSNTerminales",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracionSNTerminales ::= decSNTerminales decSNTerminales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionSNTerminales",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // informacionOP ::= EXTENSIONID DOSPUNTOS ID PUNTOYCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		compilador.setExtension(id.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("informacionOP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // informacionOP ::= LANZAMIENTOID DOSPUNTOS ID PUNTOYCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		compilador.setLanzamiento(id.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("informacionOP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // informacionOP ::= AUTORID DOSPUNTOS ID PUNTOYCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		compilador.setAutor(id.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("informacionOP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // informacionOP ::= VERSIONID DOSPUNTOS NVERSION PUNTOYCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		compilador.setVersion(id.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("informacionOP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // informacion ::= informacionOP 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("informacion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // informacion ::= informacion informacionOP 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("informacion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cuerpo ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cuerpo ::= declaracionGramatica 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cuerpo ::= declaracionSNTerminales 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cuerpo ::= declaracionExpresiones 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cuerpo ::= codFuente 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inicio ::= PORCIENTO PORCIENTO cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // inicio ::= inicio PORCIENTO PORCIENTO cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= NOMBREID ID PUNTOYCOMA NT$1 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
compilador = new Compilador(id.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= NOMBREID ID PUNTOYCOMA NT$0 informacion inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
compilador = new Compilador(id.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

