
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Sep 02 23:10:06 CST 2020
//----------------------------------------------------

package Backend.CupYFlex;

import Backend.AnalizadorLexico.Nodo;
import java.util.LinkedList;
import java_cup.runtime.*;
import Backend.CupYFlex.ErrorS;
import Backend.Compilador.Compilador;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Sep 02 23:10:06 CST 2020
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\057\000\002\002\004\000\002\022\002\000\002\002" +
    "\010\000\002\023\002\000\002\002\007\000\002\003\004" +
    "\000\002\003\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\005\004\000\002\005\003\000\002\006\006\000\002\006" +
    "\006\000\002\006\006\000\002\006\006\000\002\010\004" +
    "\000\002\015\004\000\002\015\004\000\002\011\005\000" +
    "\002\011\003\000\002\012\006\000\002\012\006\000\002" +
    "\020\004\000\002\020\005\000\002\020\005\000\002\020" +
    "\003\000\002\017\004\000\002\017\005\000\002\017\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\016\007\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\005\000\002\013\006\000\002\014\006" +
    "\000\002\014\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\132\000\004\006\005\001\002\000\004\002\134\001" +
    "\002\000\004\016\006\001\002\000\004\031\007\001\002" +
    "\000\026\003\ufffe\007\000\010\000\011\000\012\000\013" +
    "\ufffe\014\ufffe\015\ufffe\016\ufffe\032\ufffe\001\002\000\016" +
    "\003\046\013\034\014\043\015\036\016\037\032\047\001" +
    "\002\000\012\007\016\010\014\011\017\012\013\001\002" +
    "\000\026\003\046\007\016\010\014\011\017\012\013\013" +
    "\034\014\043\015\036\016\037\032\047\001\002\000\004" +
    "\030\031\001\002\000\004\030\026\001\002\000\026\003" +
    "\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4" +
    "\015\ufff4\016\ufff4\032\ufff4\001\002\000\004\030\023\001" +
    "\002\000\004\030\020\001\002\000\004\016\021\001\002" +
    "\000\004\031\022\001\002\000\026\003\ufff1\007\ufff1\010" +
    "\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1" +
    "\032\ufff1\001\002\000\004\016\024\001\002\000\004\031" +
    "\025\001\002\000\026\003\ufff3\007\ufff3\010\ufff3\011\ufff3" +
    "\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\032\ufff3\001" +
    "\002\000\004\016\027\001\002\000\004\031\030\001\002" +
    "\000\026\003\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013" +
    "\ufff2\014\ufff2\015\ufff2\016\ufff2\032\ufff2\001\002\000\004" +
    "\016\032\001\002\000\004\031\033\001\002\000\026\003" +
    "\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0" +
    "\015\ufff0\016\ufff0\032\ufff0\001\002\000\004\016\113\001" +
    "\002\000\020\002\ufffb\003\ufffb\013\ufffb\014\ufffb\015\ufffb" +
    "\016\ufffb\032\ufffb\001\002\000\020\002\uffd3\003\uffd3\013" +
    "\uffd3\014\uffd3\015\uffd3\016\uffd3\032\uffd3\001\002\000\006" +
    "\020\120\030\121\001\002\000\020\002\ufffa\003\ufffa\013" +
    "\ufffa\014\ufffa\015\ufffa\016\ufffa\032\ufffa\001\002\000\020" +
    "\002\uffff\003\046\013\034\014\043\015\036\016\037\032" +
    "\047\001\002\000\020\002\ufff8\003\ufff8\013\ufff8\014\ufff8" +
    "\015\ufff8\016\ufff8\032\ufff8\001\002\000\004\016\113\001" +
    "\002\000\026\003\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5" +
    "\013\ufff5\014\ufff5\015\ufff5\016\ufff5\032\ufff5\001\002\000" +
    "\020\002\ufff9\003\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9" +
    "\032\ufff9\001\002\000\020\002\ufff6\003\ufff6\013\ufff6\014" +
    "\ufff6\015\ufff6\016\ufff6\032\ufff6\001\002\000\004\020\053" +
    "\001\002\000\020\002\ufff7\003\ufff7\013\ufff7\014\ufff7\015" +
    "\ufff7\016\ufff7\032\ufff7\001\002\000\006\013\034\014\043" +
    "\001\002\000\020\002\uffef\003\uffef\013\uffef\014\uffef\015" +
    "\uffef\016\uffef\032\uffef\001\002\000\026\004\054\005\055" +
    "\016\063\021\062\024\057\025\067\035\066\036\064\037" +
    "\056\041\070\001\002\000\040\004\uffd9\005\uffd9\016\uffd9" +
    "\022\uffd9\024\uffd9\026\uffd9\027\uffd9\031\uffd9\032\uffd9\033" +
    "\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\001\002" +
    "\000\040\004\uffd8\005\uffd8\016\uffd8\022\uffd8\024\uffd8\026" +
    "\uffd8\027\uffd8\031\uffd8\032\uffd8\033\uffd8\035\uffd8\036\uffd8" +
    "\037\uffd8\040\uffd8\041\uffd8\001\002\000\040\004\uffda\005" +
    "\uffda\016\uffda\022\uffda\024\uffda\026\uffda\027\uffda\031\uffda" +
    "\032\uffda\033\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041" +
    "\uffda\001\002\000\004\016\107\001\002\000\024\004\054" +
    "\005\055\016\063\024\057\031\106\035\066\036\064\037" +
    "\056\041\070\001\002\000\040\004\uffe5\005\uffe5\016\uffe5" +
    "\022\uffe5\024\uffe5\026\uffe5\027\076\031\uffe5\032\077\033" +
    "\102\035\uffe5\036\uffe5\037\uffe5\040\100\041\uffe5\001\002" +
    "\000\026\004\054\005\055\016\063\021\062\024\057\025" +
    "\067\035\066\036\064\037\056\041\070\001\002\000\040" +
    "\004\uffdd\005\uffdd\016\uffdd\022\uffdd\024\uffdd\026\uffdd\027" +
    "\uffdd\031\uffdd\032\uffdd\033\uffdd\035\uffdd\036\uffdd\037\uffdd" +
    "\040\uffdd\041\uffdd\001\002\000\040\004\uffdc\005\uffdc\016" +
    "\uffdc\022\uffdc\024\uffdc\026\uffdc\027\uffdc\031\uffdc\032\uffdc" +
    "\033\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\001" +
    "\002\000\040\004\uffe2\005\uffe2\016\uffe2\022\uffe2\024\uffe2" +
    "\026\uffe2\027\uffe2\031\uffe2\032\uffe2\033\uffe2\035\uffe2\036" +
    "\uffe2\037\uffe2\040\uffe2\041\uffe2\001\002\000\040\004\uffdb" +
    "\005\uffdb\016\uffdb\022\uffdb\024\uffdb\026\uffdb\027\uffdb\031" +
    "\uffdb\032\uffdb\033\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb" +
    "\041\uffdb\001\002\000\026\004\054\005\055\016\063\021" +
    "\062\024\057\025\067\035\066\036\064\037\056\041\070" +
    "\001\002\000\004\016\071\001\002\000\004\041\072\001" +
    "\002\000\040\004\uffd7\005\uffd7\016\uffd7\022\uffd7\024\uffd7" +
    "\026\uffd7\027\uffd7\031\uffd7\032\uffd7\033\uffd7\035\uffd7\036" +
    "\uffd7\037\uffd7\040\uffd7\041\uffd7\001\002\000\024\004\054" +
    "\005\055\016\063\024\057\026\074\035\066\036\064\037" +
    "\056\041\070\001\002\000\030\004\uffe6\005\uffe6\016\uffe6" +
    "\022\uffe6\024\uffe6\026\uffe6\031\uffe6\035\uffe6\036\uffe6\037" +
    "\uffe6\041\uffe6\001\002\000\040\004\uffe8\005\uffe8\016\uffe8" +
    "\022\uffe8\024\uffe8\026\uffe8\027\076\031\uffe8\032\077\033" +
    "\102\035\uffe8\036\uffe8\037\uffe8\040\100\041\uffe8\001\002" +
    "\000\040\004\uffdf\005\uffdf\016\uffdf\022\uffdf\024\uffdf\026" +
    "\uffdf\027\uffdf\031\uffdf\032\uffdf\033\uffdf\035\uffdf\036\uffdf" +
    "\037\uffdf\040\uffdf\041\uffdf\001\002\000\040\004\uffe0\005" +
    "\uffe0\016\uffe0\022\uffe0\024\uffe0\026\uffe0\027\uffe0\031\uffe0" +
    "\032\uffe0\033\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041" +
    "\uffe0\001\002\000\040\004\uffe1\005\uffe1\016\uffe1\022\uffe1" +
    "\024\uffe1\026\uffe1\027\uffe1\031\uffe1\032\uffe1\033\uffe1\035" +
    "\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\001\002\000\040" +
    "\004\uffe4\005\uffe4\016\uffe4\022\uffe4\024\uffe4\026\uffe4\027" +
    "\uffe4\031\uffe4\032\uffe4\033\uffe4\035\uffe4\036\uffe4\037\uffe4" +
    "\040\uffe4\041\uffe4\001\002\000\022\004\054\005\055\016" +
    "\063\024\057\035\066\036\064\037\056\041\070\001\002" +
    "\000\040\004\uffe3\005\uffe3\016\uffe3\022\uffe3\024\uffe3\026" +
    "\uffe3\027\uffe3\031\uffe3\032\uffe3\033\uffe3\035\uffe3\036\uffe3" +
    "\037\uffe3\040\uffe3\041\uffe3\001\002\000\024\004\054\005" +
    "\055\016\063\022\105\024\057\035\066\036\064\037\056" +
    "\041\070\001\002\000\030\004\uffe7\005\uffe7\016\uffe7\022" +
    "\uffe7\024\uffe7\026\uffe7\031\uffe7\035\uffe7\036\uffe7\037\uffe7" +
    "\041\uffe7\001\002\000\020\002\uffe9\003\uffe9\013\uffe9\014" +
    "\uffe9\015\uffe9\016\uffe9\032\uffe9\001\002\000\004\034\110" +
    "\001\002\000\004\016\111\001\002\000\004\023\112\001" +
    "\002\000\040\004\uffde\005\uffde\016\uffde\022\uffde\024\uffde" +
    "\026\uffde\027\uffde\031\uffde\032\uffde\033\uffde\035\uffde\036" +
    "\uffde\037\uffde\040\uffde\041\uffde\001\002\000\022\002\uffeb" +
    "\003\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\032\uffeb\043" +
    "\uffeb\001\002\000\022\002\uffed\003\uffed\013\uffed\014\uffed" +
    "\015\uffed\016\uffed\032\uffed\043\115\001\002\000\004\016" +
    "\116\001\002\000\022\002\uffec\003\uffec\013\uffec\014\uffec" +
    "\015\uffec\016\uffec\032\uffec\043\uffec\001\002\000\020\002" +
    "\ufffc\003\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\032\ufffc" +
    "\001\002\000\026\004\054\005\055\016\063\021\062\024" +
    "\057\025\067\035\066\036\064\037\056\041\070\001\002" +
    "\000\004\030\122\001\002\000\004\016\123\001\002\000" +
    "\022\002\uffd4\003\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4" +
    "\032\uffd4\033\uffd4\001\002\000\022\002\uffd6\003\uffd6\013" +
    "\uffd6\014\uffd6\015\uffd6\016\uffd6\032\uffd6\033\125\001\002" +
    "\000\004\016\126\001\002\000\004\042\127\001\002\000" +
    "\022\002\uffd5\003\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5" +
    "\032\uffd5\033\uffd5\001\002\000\024\004\054\005\055\016" +
    "\063\024\057\031\131\035\066\036\064\037\056\041\070" +
    "\001\002\000\020\002\uffea\003\uffea\013\uffea\014\uffea\015" +
    "\uffea\016\uffea\032\uffea\001\002\000\022\002\uffee\003\uffee" +
    "\013\uffee\014\uffee\015\uffee\016\uffee\032\uffee\043\115\001" +
    "\002\000\020\002\ufffd\003\046\013\034\014\043\015\036" +
    "\016\037\032\047\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\132\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\022\010\023\007" +
    "\001\001\000\020\003\132\004\034\007\037\010\041\012" +
    "\044\013\047\015\050\001\001\000\006\005\011\006\014" +
    "\001\001\000\022\003\040\004\034\006\043\007\037\010" +
    "\041\012\044\013\047\015\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\004\116\007" +
    "\037\010\041\012\044\013\047\015\050\001\001\000\002" +
    "\001\001\000\004\011\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\051\001\001\000\002\001\001\000" +
    "\010\016\064\017\060\020\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\064\017\074\001\001\000\004\021\100\001\001" +
    "\000\010\016\064\017\060\020\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\016\064\017\060\020\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\016\064" +
    "\017\074\001\001\000\002\001\001\000\004\021\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\102\001\001\000\002\001" +
    "\001\000\006\016\064\017\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\016\064\017\060\020\127\001\001\000\002" +
    "\001\001\000\004\014\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\064\017\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\004\116\007\037\010\041" +
    "\012\044\013\047\015\050\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila =  s.right;
        int columna = s.left;
        String red="\033[31m"; 
        System.out.println(red + "ERROR SINTACTICO RECUPERADO!! \t\tLexema: " + lexema+ "\t\tFila " + fila +"\t\tColumna: " +columna+"simbolo"  );
        ErrorS error = new ErrorS(lexema, fila, columna , "error Sintactico");
        ErrorS.tablaErroresSintacticos.add(error);
    }

    public void unrrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        String red="\033[31m"; 
        System.out.println(red + "ERROR SINTACTICO SIN RECUPERACION!! \t\tLexema: " + lexema+ "\t\tFila " + fila +"\t\tColumna: " +columna );
        ErrorS error = new ErrorS(lexema, fila, columna , "error Sintactico");
        ErrorS.tablaErroresSintacticos.add(error);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


    int numNodo=1;
    Compilador compilador;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // codFuente ::= JAVACODE 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codFuente",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cuerpoGramatica ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoGramatica",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // cuerpoGramatica ::= cuerpoGramatica BARRAO ID CODIGOJ 
            {
              Object RESULT =null;
		
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoGramatica",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaracionGramatica ::= ID DOSPUNTOS DOSPUNTOS cuerpoGramatica 
            {
              Object RESULT =null;
		
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionGramatica",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expresion ::= COMILLA ID COMILLA 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            Nodo nuevo = new Nodo(e.toString(), numNodo);
                            nuevo.getPrimeros().add(numNodo);
                            nuevo.getUltimos().add(numNodo);;
                            nuevo.setAnulable(nuevo.anulable(nuevo));
                            numNodo++;
                            RESULT = nuevo;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expresion ::= PUNTO 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Nodo nuevo = new Nodo(e.toString(), numNodo);
                            nuevo.getPrimeros().add(numNodo);
                            nuevo.getUltimos().add(numNodo);
                            nuevo.setAnulable(nuevo.anulable(nuevo));
                            numNodo++;
                            RESULT = nuevo;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expresion ::= DIGITO 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Nodo nuevo = new Nodo(e.toString(), numNodo);
                            nuevo.getPrimeros().add(numNodo);
                            nuevo.getUltimos().add(numNodo);
                            nuevo.setAnulable(nuevo.anulable(nuevo));
                            numNodo++;
                            RESULT = nuevo;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expresion ::= ESPACIOBLANCO 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Nodo nuevo = new Nodo(e.toString(), numNodo);
                            nuevo.getPrimeros().add(numNodo);
                            nuevo.getUltimos().add(numNodo);
                            nuevo.setAnulable(nuevo.anulable(nuevo));
                            numNodo++;
                            RESULT = nuevo;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expresion ::= SALTOLINEA 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Nodo nuevo = new Nodo(e.toString(), numNodo);
                            nuevo.getPrimeros().add(numNodo);
                            nuevo.getUltimos().add(numNodo);;
                            nuevo.setAnulable(nuevo.anulable(nuevo));
                            numNodo++;
                            RESULT = nuevo;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expresion ::= TABULADOR 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Nodo nuevo = new Nodo(e.toString(), numNodo);
                            nuevo.getPrimeros().add(numNodo);
                            nuevo.getUltimos().add(numNodo);
                            nuevo.setAnulable(nuevo.anulable(nuevo));
                            numNodo++;
                            RESULT = nuevo;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expresion ::= ID 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Nodo nuevo = new Nodo(id.toString(), numNodo);
                            nuevo.getPrimeros().add(numNodo);
                            nuevo.getUltimos().add(numNodo);
                            nuevo.setAnulable(nuevo.anulable(nuevo));
                            numNodo++;
                            RESULT = nuevo;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expresion ::= CORCHETEABRE ID GUION ID CORCHETECIERRA 
            {
              Nodo RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int guionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int guionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object guion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            String exp= id1.toString()+ guion.toString()+id2.toString();
                            if(exp=="A-Z"){
                                exp= "L";
                            }else if(exp == "1-9"){
                                exp="num";
                            }
                            Nodo e =  new Nodo(exp, numNodo);
                            numNodo++;
                            e.getPrimeros().add(numNodo);
                            e.getUltimos().add(numNodo);
                            e.setAnulable(e.anulable(e));
                            numNodo++;
                            RESULT= e;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // simbolsF ::= ASTERISCO 
            {
              String RESULT =null;
		RESULT = "**" ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolsF",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // simbolsF ::= INTERROGACIONC 
            {
              String RESULT =null;
		RESULT ="??";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolsF",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // simbolsF ::= SIMMAS 
            {
              String RESULT =null;
		RESULT= "++";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simbolsF",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ExpresionesR ::= Expresion 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpresionesR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ExpresionesR ::= ExpresionesR BARRAO Expresion 
            {
              Nodo RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo exp1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo exp2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                        Nodo raiz = new Nodo("||");
                                        raiz.setIzquierdo(exp1);
                                        raiz.setDerecho(exp2);
                                        raiz.setAnulable(raiz.anulable(raiz));
                                        raiz.setPrimeros( raiz.AgregarPrimeros(raiz));
                                        raiz.setUltimos(raiz.AgregarUltimos(raiz));
                                        RESULT =raiz;
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpresionesR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ExpresionesR ::= ExpresionesR simbolsF 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int simleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Nodo raiz = new Nodo(sim);
                                      raiz.setIzquierdo(e);
                                      raiz.setAnulable(raiz.anulable(raiz));
                                      raiz.setPrimeros( raiz.AgregarPrimeros(e));
                                      raiz.setUltimos(raiz.AgregarUltimos(e));
                                      RESULT = raiz;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpresionesR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresionesRegulares ::= ExpresionesR 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesRegulares",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresionesRegulares ::= PARABRE expresionesRegulares PARCIERRA 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesRegulares",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresionesRegulares ::= LLAVEABRE expresionesRegulares LLAVECIERRA 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesRegulares",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresionesRegulares ::= expresionesRegulares ExpresionesR 
            {
              Nodo RESULT =null;
		int eileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo ei = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int edleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int edright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo ed = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Nodo raiz = new Nodo("·");
                                      raiz.setIzquierdo(ei);
                                      raiz.setDerecho(ed);
                                      raiz.setAnulable(raiz.anulable(raiz));
                                      raiz.setPrimeros( raiz.AgregarPrimeros(raiz));
                                      raiz.setUltimos(raiz.AgregarUltimos(raiz));
                                      RESULT = raiz;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesRegulares",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaracionExpresiones ::= INTERROGACIONC IGUAL expresionesRegulares PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionExpresiones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaracionExpresiones ::= ID IGUAL expresionesRegulares PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionExpresiones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SNterminales ::= ID 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SNterminales",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SNterminales ::= SNterminales COMA ID 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SNterminales",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // decSNTerminales ::= NOTERMINALID SNterminales 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decSNTerminales",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // decSNTerminales ::= TERMINALID SNterminales 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decSNTerminales",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracionSNTerminales ::= decSNTerminales decSNTerminales 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionSNTerminales",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // informacionOP ::= EXTENSIONID DOSPUNTOS ID PUNTOYCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		compilador.setExtension(id.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("informacionOP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // informacionOP ::= LANZAMIENTOID DOSPUNTOS ID PUNTOYCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		compilador.setLanzamiento(id.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("informacionOP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // informacionOP ::= AUTORID DOSPUNTOS ID PUNTOYCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		compilador.setAutor(id.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("informacionOP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // informacionOP ::= VERSIONID DOSPUNTOS ID PUNTOYCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		compilador.setVersion(id.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("informacionOP",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // informacion ::= informacionOP 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("informacion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // informacion ::= informacion informacionOP 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("informacion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cuerpo ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cuerpo ::= declaracionGramatica 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cuerpo ::= declaracionSNTerminales 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cuerpo ::= declaracionExpresiones 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cuerpo ::= codFuente 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inicio ::= cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // inicio ::= inicio cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= NOMBREID ID PUNTOYCOMA NT$1 inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
compilador = new Compilador(id.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= NOMBREID ID PUNTOYCOMA NT$0 informacion inicio 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
compilador = new Compilador(id.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

